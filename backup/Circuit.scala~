package simulations

import common._

class Wire {
  private var sigVal = false
  private var actions: List[Simulator#Action] = List()

  def getSignal: Boolean = sigVal
  
  def setSignal(s: Boolean) {
    if (s != sigVal) {
      sigVal = s
      actions.foreach(action => action())
    }
  }

  def addAction(a: Simulator#Action) {
    actions = a :: actions
    a()
  }
}

abstract class CircuitSimulator extends Simulator {

  val InverterDelay: Int
  val AndGateDelay: Int
  val OrGateDelay: Int

  def probe(name: String, wire: Wire) {
    wire addAction {
      () => afterDelay(0) {
        println(
          "  " + currentTime + ": " + name + " -> " +  wire.getSignal)
      }
    }
  }

  def inverter(input: Wire, output: Wire) {
    def invertAction() {
      val inputSig = input.getSignal
      afterDelay(InverterDelay) { output.setSignal(!inputSig) }
    }
    input addAction invertAction
  }

  def andGate(a1: Wire, a2: Wire, output: Wire) {
    def andAction() {
      val a1Sig = a1.getSignal
      val a2Sig = a2.getSignal
      afterDelay(AndGateDelay) { output.setSignal(a1Sig & a2Sig) }
    }
    a1 addAction andAction
    a2 addAction andAction
  }

  //
  // to complete with orGates and demux...
  //

  def orGate(a1: Wire, a2: Wire, output: Wire) {
    def orAction() {
      val a1Sig = a1.getSignal
      val a2Sig = a2.getSignal
      afterDelay(OrGateDelay) { output.setSignal(a1Sig | a2Sig)}
    }
    a1 addAction orAction
    a2 addAction orAction
  }
  
  def directGate(in:Wire, output:Wire){
    def directAction(){
      val inputSig = in.getSignal
      afterDelay(0) { output.setSignal(inputSig) }
    }
    in addAction directAction
  }

  def orGate2(a1: Wire, a2: Wire, output: Wire) {
    val a3, a4, output1 = new Wire
    inverter(a1, a3)
    inverter(a2, a4)
    andGate(a3, a4, output1)
    inverter(output1, output)
  }

  def demux(in: Wire, c: List[Wire], out: List[Wire]) {
    c match {
      case Nil => {
        directGate(in, out(0))
      }
      case cH::cT => {
        val highInput, lowInput, invertedWire = new Wire
        val (highOutput, lowOutput) = out.splitAt(out.length/2)
        andGate(in, cH, highInput)
        demux(highInput, cT, highOutput)
        inverter(cH, invertedWire)
        andGate(in, invertedWire, lowInput)
        demux(lowInput, cT, lowOutput)
      }
    }
  }
}

object Circuit extends CircuitSimulator {
  val InverterDelay = 1
  val AndGateDelay = 3
  val OrGateDelay = 5

  def andGateExample {
    val in1, in2, out, out2 = new Wire
    andGate(in1, in2, out)
    orGate2(in1, in2, out2)
    probe("in1", in1)
    probe("in2", in2)
    probe("out", out)
    probe("out2", out2)
    in1.setSignal(false)
    in2.setSignal(false)
    run

    in1.setSignal(true)
    run

    in2.setSignal(true)
    run
  }

  def demuxExample {
    val in = new Wire
    val c = List(new Wire)
    val out = List.fill(2)(new Wire)
    demux(in, c, out)
    probe("in", in)
    probe("out(0))", out(0))
    probe("out(1))", out(1))
    in.setSignal(false)
    c(0).setSignal(false)
    run
    in.setSignal(true)
    c(0).setSignal(true)
    run
    in.setSignal(false)
    run
  }

  //
  // to complete with orGateExample and demuxExample...
  //
}

object CircuitMain extends App {
  // You can write tests either here, or better in the test class CircuitSuite.
  Circuit.demuxExample
}
