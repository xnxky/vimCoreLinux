package kvstore

import akka.actor.Props
import akka.actor.Actor
import akka.actor.ActorRef
import scala.concurrent.duration._

object Replicator {
  case class Replicate(key: String, valueOption: Option[String], id: Long)
  case class Replicated(key: String, id: Long)
  
  case class Snapshot(key: String, valueOption: Option[String], seq: Long)
  case class SnapshotAck(key: String, seq: Long)

  def props(replica: ActorRef): Props = Props(new Replicator(replica))
}

class Replicator(val replica: ActorRef) extends Actor {
  import Replicator._
  import Replica._
  import context.dispatcher
  
  /*
   * The contents of this actor is just a suggestion, you can implement it in any way you like.
   */

  // map from sequence number to pair of sender and request
  var acks = Map.empty[Long, (ActorRef, Replicate)]
  // a sequence of not-yet-sent snapshots (you can disregard this if not implementing batching)
  var pending = Vector.empty[Snapshot]

  
  var _seqCounter = 0L
  var cancellable:Cancellable

  var lastAckedSeq = _seqCounter-1
  def nextSeq = {
    val ret = _seqCounter
    _seqCounter += 1
    ret
  }
  
  def receive: Receive = {
    case Replicate(key, valueOption, id) =>
      val seqNum = nextSeq
      acks += (seqNum -> (sender, Replicate(key, valueOption, id)))
      if(lastAckedSeq == seqNum-1){
        replica ! Snapshot(key, valueOption, seqNum)
        cancellable = schedule(200 milliseconds, 100 milliseconds, replica, Snapshot(key, valueOption, seqNum))
      } else{
        pending += Snapshot(key, valueOption, seqNum)
      } 

    case SnapshotAck(key, seq) =>
      if(seq > lastAckedSeq){
        (lastAckedSeq+1 to seq) foreach { 
          ackSeq => 
            val (origSender, origReplicateMsg) = acks(ackSeq)
            origSender ! Replicated(origReplicateMsg.key, origReplicateMsg.id)
            cancellable.cancel()
        }
        lastAckedSeq = seq
        val nextExpectedSeq = lastAckedSeq+1
        if(acks contains nextExpectedSeq){
          val origReplicateMsg = acks(nextExpectedSeq)._2
          val (sameKeyPrefixVector, otherSuffixVector) = pending span { _.key == origReplicateMsg.key }
          pending = otherSuffixVector
          replica ! sameKeyPrefixVector.last
          cancellable = schedule(200 milliseconds, 100 milliseconds, replica, Snapshot(key, valueOption, seqNum))
        }
      }
  }

}
