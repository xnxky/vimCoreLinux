/**
 * Copyright (C) 2009-2013 Typesafe Inc. <http://www.typesafe.com>
 */
package actorbintree

import akka.actor._
import scala.collection.immutable.Queue

object BinaryTreeSet {

  trait Operation {
    def requester: ActorRef
    def id: Int
    def elem: Int
  }

  trait OperationReply {
    def id: Int
  }

  /** Request with identifier `id` to insert an element `elem` into the tree.
    * The actor at reference `requester` should be notified when this operation
    * is completed.
    */
  case class Insert(requester: ActorRef, id: Int, elem: Int) extends Operation

  /** Request with identifier `id` to check whether an element `elem` is present
    * in the tree. The actor at reference `requester` should be notified when
    * this operation is completed.
    */
  case class Contains(requester: ActorRef, id: Int, elem: Int) extends Operation

  /** Request with identifier `id` to remove the element `elem` from the tree.
    * The actor at reference `requester` should be notified when this operation
    * is completed.
    */
  case class Remove(requester: ActorRef, id: Int, elem: Int) extends Operation

  /** Request to perform garbage collection*/
  case object GC

  /** Holds the answer to the Contains request with identifier `id`.
    * `result` is true if and only if the element is present in the tree.
    */
  case class ContainsResult(id: Int, result: Boolean) extends OperationReply
  
  /** Message to signal successful completion of an insert or remove operation. */
  case class OperationFinished(id: Int) extends OperationReply

}


class BinaryTreeSet extends Actor {
  import BinaryTreeSet._
  import BinaryTreeNode._

  def createRoot: ActorRef = context.actorOf(BinaryTreeNode.props(0, initiallyRemoved = true))

  var root = createRoot
  
  var status = "normal"

  // optional
  var pendingQueue = Queue.empty[Operation]

  // optional
  def receive = normal

  var id2Requester = Map[Int, ActorRef]()
  // optional
  /** Accepts `Operation` and `GC` messages. */
  val normal: Receive = { 
    case o:Operation => handleOperation(o)
    case r:OperationReply => handleReply(r)
    case GC =>
      println("receive GC collection")
      val newRoot = createRoot
      context.become(garbageCollecting(newRoot))
      status = "GC"
      root ! CopyTo(newRoot)

  }

  def handleOperation(o:Operation)  {
    id2Requester += (o.id -> o.requester)
    o match {
      case Insert(requester, id, elem) =>
        println(s"receive operation Insert $elem $status with id ${o.id}")
        root ! Insert(self, id, elem)
      case Contains(requester, id, elem) =>
        println(s"receive operation Contain $elem $status with id ${o.id}")
        root ! Contains(self, id, elem)
      case Remove(requester, id, elem) =>
        println(s"receive operation Remove $elem $status with id ${o.id}")
        root ! Remove(self, id, elem)   
    }
  }

  def handleReply(r:OperationReply){
    r match{
      case OperationFinished(id) =>
        println(s"operation $id is completed")
        id2Requester(id) ! OperationFinished(id)
      case ContainsResult(id, result) =>
        println(s"operatoin $id is completed")
        id2Requester(id) ! ContainsResult(id, result)
    }
  }

  // optional
  /** Handles messages while garbage collection is performed.
    * `newRoot` is the root of the new binary tree where we want to copy
    * all non-removed elements into.
    */
   def garbageCollecting(newRoot: ActorRef): Receive = {
     case CopyFinished => 
       println("GC done")
       root ! PoisonPill
       root = newRoot
       println("handling queue")
       pendingQueue foreach { handleOperation(_) }
       println("done with queue")
       pendingQueue = Queue.empty[Operation]
       context.become(normal)
       status = "normal"
     case o:Operation => 
       pendingQueue = pendingQueue enqueue o
     case r:OperationReply =>
       handleReply(r)
   }

}

object BinaryTreeNode {
  trait Position

  case object Left extends Position
  case object Right extends Position

  case class CopyTo(treeNode: ActorRef)
  case object CopyFinished

  def props(elem: Int, initiallyRemoved: Boolean) = Props(classOf[BinaryTreeNode],  elem, initiallyRemoved)
}

class BinaryTreeNode(val elem: Int, initiallyRemoved: Boolean) extends Actor {
  import BinaryTreeNode._
  import BinaryTreeSet._

  var subtrees = Map[Position, ActorRef]()
  var removed = initiallyRemoved
  val id2Requester = Map[Int, ActorRef]()

  // optional
  def receive = normal

  // optional
  /** Handles `Operation` messages and `CopyTo` requests. */
  val normal: Receive = {
    case Insert(requester, id, elem) => 
      id2Requester += (id -> requester)
      handleInsert(id, elem)
    case Contains(requester, id, elem) => 
      id2Requester += (id -> requester)
      handleContains(id, elem)
    case Remove(requester, id, elem) => 
      id2Requester += (id -> requester)
      handleRemove(id, elem)
    case OperationFinished(id) => 
      id2Requester(id) ! OperationFinished(id)
    case ContainsResult(id, result) => 
      id2Requester(id) ! ContainsResult(id, result)
    case CopyTo(treeNode) =>  
      handleCopy(treeNode)
  }

  def handleCopy(treeNode:ActorRef){
    val awaitingSet = for {
      child <- Set(Left, Right)
      if(subtrees contains child)
    } yield subtrees(child)
    if(awaitingSet.isEmpty && removed) context.parent ! CopyFinished
    else{
      context.become(copying(awaitingSet, insertConfirmed=removed))
      if(! removed){
        treeNode ! Insert(self, elem, elem) 
      }
      awaitingSet foreach { _ ! CopyTo(treeNode) }
    }
  }

  def getNextNode(elem:Int):Position = if(elem < this.elem) Left else Right
  def getNextNodeStr(elem:Int):String = if(elem < this.elem) "Left" else "Right"

  def handleNextNode(nextNode:Position, existOps: Position => Unit, absenseOps: Position =>Unit) {
    if(subtrees contains nextNode) existOps(nextNode)
    else absenseOps(nextNode)
  }

  def handleInsert(id:Int, elem:Int) {
    println(s"handling insert in the node ${this.elem}")
    if(this.elem == elem) {
      removed = false
      println(s"operatoin $id find $elem")
      id2Requester(id) ! OperationFinished(id)
    } 
    else {
      val nextNodeString = getNextNodeStr(elem)
      handleNextNode(
        getNextNode(elem), 
        { nextNode:Position => 
          println(s"send insert operation with id $id and elem $elem to $nextNodeString")
          subtrees(nextNode) ! Insert(self, id, elem) 
        },
        { nextNode:Position => 
          subtrees += (nextNode -> context.actorOf(props(elem, initiallyRemoved=false)))
          println(s"create node $nextNodeString for operation with id $id with elem $elem")
          id2Requester(id) ! OperationFinished(id)
        }
      )
    }
  }

  def handleContains(id:Int, elem:Int) {
    println(s"handling contain in node ${this.elem}")
    if(this.elem == elem){
      println(s"find the element $elem for contain operation $id")
      id2Requester(id) ! ContainsResult(id, ! removed)
    }
    else{
      val nextNodeString = getNextNodeStr(elem)
      handleNextNode(getNextNode(elem),
        {nextNode:Position => 
          println(s"send contain operation with id $id and elem $elem to $nextNodeString")
          subtrees(nextNode) ! Contains(self, id, elem)
        },
        {nextNode:Position => 
          println(s"for contain operation with id $id, nothing is found for elem $elem")
          id2Requester(id) ! ContainsResult(id, false)
        }
      )
    }
  }

  def handleRemove(id:Int, elem:Int) {
    println(s"handling remove in node ${this.elem}")
    if(this.elem == elem){
      removed = true
      println(s"for remove operation $id, found elem $elem")
      id2Requester(id) ! OperationFinished(id)
    }
    else
      handleNextNode(getNextNode(elem),
        {nextNode:Position => 
          println(s"send the remove operation $id to "+getNextNodeStr(elem))
          subtrees(nextNode) ! Remove(self, id, elem)
        },
        {nextNode:Position => 
          println(s"for remove operation $id, no elem $elem is found")
          id2Requester(id) ! OperationFinished(id)
        }
      )
  }
  
  // optional
  /** `expected` is the set of ActorRefs whose replies we are waiting for,
    * `insertConfirmed` tracks whether the copy of this node to the new tree has been confirmed.
    */
  def copying(expected: Set[ActorRef], insertConfirmed: Boolean): Receive = {
      case CopyFinished => 
        val newExpected = expected - sender
        if(newExpected.isEmpty && insertConfirmed) context.parent ! CopyFinished
        else context.become(copying(newExpected, insertConfirmed))
      case OperationFinished(id) => 
        if(expected.isEmpty) context.parent ! CopyFinished
        else context.become(copying(expected, true))
  }
}
