package simulations

import math.random

class EpidemySimulator extends Simulator {

  def randomBelow(i: Int) = (random * i).toInt

  protected[simulations] object SimConfig {
    val population: Int = 300
    val roomRows: Int = 8
    val roomColumns: Int = 8

    // to complete: additional parameters of simulation
    val initNumOfSickPersons = (population*0.01).toInt
    val sickDelay: Int = 6
    val dieDelay:Int = 14
    val immuneDelay:Int = 16
    val healthyDelay:Int = 18
  }

  import SimConfig._

  // to complete: construct list of persons
  val persons: List[Person] = createPersons
  
  def createPersons:List[Person] = {
    import scala.util.Random
    val initPersons = for(curId <- (0 until population).toList) yield new Person(curId)
    Random.shuffle(initPersons) take initNumOfSickPersons foreach ( _.beInfected )
    initPersons
  }

  class Person (val id: Int) {
    var infected = false
    var sick = false
    var immune = false
    var dead = false
    def healthy: Boolean = !infected && !sick && !immune && !dead

    // demonstrates random number generation
    var row: Int = randomBelow(roomRows)
    var col: Int = randomBelow(roomColumns)

    //
    // to complete with simulation logic
    //

    def nextMoveDate = randomBelow(5)+1
    def inRoom(room:(Int, Int)):Boolean = (row, col) == room
    def getVisibleCleanNeighbors:List[(Int, Int)] = {
      val nextRow = if(row<roomRows-1) row+1 else 0
      val preRow = if(row==0) roomRows-1 else row-1
      val nextCol = if(col<roomColumns-1) col+1 else 0
      val preCol = if(col==0) roomColumns-1 else col-1
      List((nextRow, nextCol), (nextRow, preCol), (preRow, nextCol), (preRow, preCol)) filter (!hasVisiblyInfectionPerson(_))
    }

    def hasVisiblyInfectionPerson(room:(Int,Int)):Boolean = 
      persons exists { onePerson => onePerson.inRoom(room) && onePerson.sick }

    def hasInfectiousPerson(room:(Int, Int)):Boolean = 
      persons exists { onePerson => onePerson.inRoom(room) && ! onePerson.healthy }
    
    def beInfected {
      infected = true
      afterDelay(sickDelay) {sick = true }
      afterDelay(dieDelay) {if(random<0.25) dead = true}
      afterDelay(immuneDelay) {if(!dead) {sick = false;immune = true}}
      afterDelay(healthyDelay) {if(!dead) {immune=false; infected=false}}
    }

    def move(){
      val cleanRooms: List[(Int, Int)] = getVisibleCleanNeighbors
      if(!cleanRooms.isEmpty){
        val nextRoom:(Int,Int) = cleanRooms(randomBelow(cleanRooms.length))
        row =  nextRoom._1
        col =  nextRoom._2
        if(hasInfectiousPerson(nextRoom) && healthy && random<0.4) beInfected
      }
      afterDelay(nextMoveDate) {if(!dead) move }
    }
    afterDelay(nextMoveDate){ if(!dead) move }
  }
}
